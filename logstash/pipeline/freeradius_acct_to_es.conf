input {
  kafka {
    bootstrap_servers => "kafka-1:9092,kafka-2:9092,kafka-3:9092"
    topics => ["freeradius_acct"]
    codec => multiline {
      pattern => "^\w{3} \w{3} \d{1,2} \d{2}:\d{2}:\d{2} \d{4}$"
      negate => true
      what => "previous"
    }
  }
}

filter {
  # Extract the top timestamp line
  grok {
    match => { "message" => "^(?<raw_timestamp>%{DAY} %{MONTH} %{MONTHDAY} %{TIME} %{YEAR})" }
  }

  # Parse key=value pairs
  kv {
    source => "message"
    field_split => "\n"
    value_split => "="
    trim_value => "\""
    trim_key => " "
  }

  mutate {
    rename => { "User-Name" => "user" }
    rename => { "Acct-Status-Type" => "acct_status_type" }
    rename => { "NAS-IP-Address" => "nas_ip" }
    rename => { "Acct-Session-Id" => "session_id" }
    rename => { "Framed-IP-Address" => "framed_ip" }
    rename => { "NAS-Port" => "nas_port" }
    rename => { "NAS-Port-Type" => "nas_port_type" }
    rename => { "Calling-Station-Id" => "calling_station_id" }
    rename => { "Called-Station-Id" => "called_station_id" }
    rename => { "Acct-Unique-Session-Id" => "acct_unique_session_id" }
    rename => { "Event-Timestamp" => "event_timestamp_raw" }
    rename => { "Timestamp" => "unix_timestamp" }
  }

  # Parse event_timestamp_raw (e.g., "Apr 20 2025 21:20:29 UTC")
  date {
    match => ["event_timestamp_raw", "MMM dd yyyy HH:mm:ss Z"]
    target => "@timestamp"
    timezone => "UTC"
  }

  # Fallback to raw_timestamp if needed
  if "_dateparsefailure" in [tags] {
    date {
      match => ["raw_timestamp", "EEE MMM dd HH:mm:ss yyyy"]
      target => "@timestamp"
      timezone => "UTC"
      remove_field => ["raw_timestamp"]
    }
  }

  mutate {
    add_field => {
      "request-type" => "Acct"
    }
    convert => {
      "nas_port" => "integer"
      "unix_timestamp" => "integer"
    }
    remove_field => ["message", "event_timestamp_raw"]
  }
}


output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "acct-logs-%{+YYYY.MM.dd}"
    document_id => "%{acct_unique_session_id}-%{unix_timestamp}"
  }

  stdout { codec => rubydebug }
}
