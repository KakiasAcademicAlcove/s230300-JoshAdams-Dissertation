input {
  kafka {
    bootstrap_servers => "kafka-1:9092,kafka-2:9092,kafka-3:9092"
    topics => ["freeradius_auth_accept","freeradius_auth_reject"]
    codec => "plain"
    ecs_compatibility => disabled
    security_protocol => "SSL"
    ssl_truststore_location => "/usr/share/logstash/certs/kafka/logstash.truststore.jks"
    ssl_truststore_password => "${KAFKA_TRUSTSTORE_PASSWORD}"
  }
}

filter {
  # Flatten "event.original" to "message"
  mutate {
    rename => { "event.original" => "message" }
  }

  # Match both accept and reject lines
  grok {
    match => {
      "message" => [
        # ACCEPT pattern
        "^%{WORD:day_of_week} %{MONTH:month} +%{MONTHDAY:day} %{TIME:time} %{YEAR:year} : Auth: \(%{NUMBER:auth_id}\) Login OK: \[%{EMAILADDRESS:user}\] \(from client %{HOSTNAME:client} port %{NUMBER:port}\)$",

        # REJECT pattern
        "^%{WORD:day_of_week} %{MONTH:month} +%{MONTHDAY:day} %{TIME:time} %{YEAR:year} : Auth: \(%{NUMBER:auth_id}\) Login incorrect \(%{DATA:reason}\): \[%{EMAILADDRESS:user}\] \(from client %{HOSTNAME:client} port %{NUMBER:port}\)$"
      ]
    }
  }

  # Only continue if grok succeeded
  if "_grokparsefailure" not in [tags] {
    mutate {
      remove_field => ["day_of_week"]
      add_field => {
        "timestamp" => "%{month} %{day} %{time} %{year}"
      }
    }

    ruby {
      code => 'event.set("timestamp", event.sprintf("%{timestamp}"))'
    }

    date {
      match => ["timestamp", "MMM dd HH:mm:ss yyyy"]
      target => "@timestamp"
      timezone => "UTC"
    }

    mutate {
      add_field => {
        "request-type" => "Auth"
      }
    }

    if "Login OK" in [message] {
      mutate { add_field => { "auth_result" => "Accept" } }
    } else if "Login incorrect" in [message] {
      mutate { add_field => { "auth_result" => "Reject" } }
    }
  }

  # Remove message field once all processing is done
  mutate {
    remove_field => ["message"]
  }
}

output {
  elasticsearch {
    hosts=> ["https://elasticsearch:9200"]
    index => "auth-logs-%{+YYYY.MM.dd}"
    user=> "elastic"
    password=> "${ELASTIC_PASSWORD}"
    cacert=> "/usr/share/logstash/certs/ca/ca.crt"
    ssl => true
    ssl_certificate_verification => true
  }

  stdout { codec => rubydebug }
}
