version: "2.4"

volumes:
  elastic-certs:
    name: elastic-certs
    driver: local
  kafka-certs:
    name: kafka-certs
    driver: local
  freeradius_logs:
    name: freeradius_logs
    driver: local
  freeradius_data:
    name: freeradius_data
    driver: local
  kafka_1_data:
    name: kafka_1_data
    driver: local
  kafka_2_data:
    name: kafka_2_data
    driver: local
  kafka_3_data:
    name: kafka_3_data
    driver: local
  elasticsearch_data:
    name: elasticsearch_data
    driver: local
  kibana_data:
    name: kibana_data
    driver: local
  logstash_data:
    name: logstash_data
    driver: local
  metricbeat_data:
    name: metricbeat_data
    driver: local
  filebeat_data:
    name: filebeat_data
    driver: local

networks:
  poc_network:
    name: poc_network
    driver: bridge

services:
  kafka-security:
    image: lucidworks/keytool-utils:${KEYTOOL_UTILS_VERSION}
    container_name: kafka-security
    hostname: kafka-security
    user: root
    restart: "no" 
    volumes:
      - type: volume
        source: kafka-certs
        target: /certs
      - type: bind
        source: ./certs/kafka
        target: /kafka_certs_setup
    networks:
      poc_network:
        aliases:
          - kafka-security
    environment:
      - KAFKA_CERT_PASSWORD=${KAFKA_CERT_PASSWORD}
    entrypoint: ["/bin/bash", "-c"]
    command: >
      "
      chmod +x /kafka_certs_setup/certs_creation.sh &&
      /kafka_certs_setup/certs_creation.sh
      " 

  elastic-security:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}
    container_name: elastic-security
    hostname: elastic-security
    user: "0"
    volumes:
      - type: volume
        source: elastic-certs
        target: /usr/share/elasticsearch/config/certs
      - type: bind
        source: ./certs/elastic/certs_creation.sh
        target: /elastic_certs_setup/certs_creation.sh
      - type: bind
        source: ./certs/elastic/instances.yml
        target: /elastic_certs_setup/instances.yml
        read_only: true
    networks:
      poc_network:
        aliases:
          - elastic-security
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_PASSWORD=${KIBANA_PASSWORD}
    entrypoint: ["/bin/bash", "-c"]
    command: >
      "
      chmod +x /elastic_certs_setup/certs_creation.sh &&
      /elastic_certs_setup/certs_creation.sh
      "
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/elasticsearch/elasticsearch.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  elasticsearch:
    depends_on:
      elastic-security:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}
    labels:
      co.elastic.logs/module: elasticsearch
    container_name: elasticsearch
    hostname: elasticsearch
    volumes:
      - type: volume 
        source: elastic-certs
        target: /usr/share/elasticsearch/config/certs
      - type: volume
        source: elasticsearch_data
        target: /usr/share/elasticsearch/data
    networks:
      poc_network:
        aliases:
          - elasticsearch
    ports:
      - ${ELASTICSEARCH_PORT}:9200
    environment:
      - node.name=${ELASTICSEARCH_NODE_NAME}
      - cluster.name=${ELASTICSEARCH_CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=${ELASTICSEARCH_BOOTSTRAP_MEMORY_LOCK}
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/elasticsearch/elasticsearch.key
      - xpack.security.http.ssl.certificate=certs/elasticsearch/elasticsearch.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/elasticsearch/elasticsearch.key
      - xpack.security.transport.ssl.certificate=certs/elasticsearch/elasticsearch.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${ELASTICSEARCH_LICENSE}
    mem_limit: ${ELASTICSEARCH_MEMORY_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    depends_on:
      elasticsearch:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${ELASTIC_VERSION}
    labels:
      co.elastic.logs/module: kibana
    container_name: kibana
    hostname: kibana
    volumes:
      - type: volume
        source: elastic-certs
        target: /usr/share/kibana/config/certs
      - type: volume
        source: kibana_data
        target: /usr/share/kibana/data
    networks:
      poc_network:
        aliases:
          - kibana
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - XPACK_SECURITY_ENCRYPTIONKEY=${ELASTIC_ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ELASTIC_ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ELASTIC_ENCRYPTION_KEY}
    mem_limit: ${KIBANA_MEMORY_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kafka-1:
    depends_on:
      kafka-security:
        condition: service_completed_successfully
    image: apache/kafka:${KAFKA_VERSION}
    container_name: kafka-1
    hostname: kafka-1
    user: root
    volumes:
      - type: volume
        source: kafka_1_data
        target: /var/lib/kafka
      - type: volume
        source: kafka-certs
        target: /etc/kafka/secrets
      - type: bind
        source: ./certs/kafka/client-1-ssl.properties
        target: /etc/kafka/secrets/client-ssl.properties
      - type: bind
        source: ./services/kafka/config/kafka-1.server.properties
        target: /opt/kafka/config/server.properties
      - type: bind
        source: ./services/kafka/config/log4j.properties
        target: /opt/kafka/config/log4j.properties
    networks:
      poc_network:
        aliases:
          - kafka-1
    ports:
      - "19092:9092"
      - "19093:9093"
    environment:
      KAFKA_NODE_ID: ${KAFKA_NODE_1_NODE_ID}
      KAFKA_PROCESS_ROLES: ${KAFKA_NODE_1_PROCESS_ROLES}
      KAFKA_LISTENERS: ${KAFKA_NODE_1_LISTENERS}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_NODE_1_ADVERTISED_LISTENERS}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_NODE_1_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_CONTROLLER_LISTENER_NAMES: ${KAFKA_NODE_1_CONTROLLER_LISTENER_NAMES}
      KAFKA_INTER_BROKER_LISTENER_NAME: ${KAFKA_NODE_1_INTER_BROKER_LISTENER_NAME}
      KAFKA_CONTROLLER_QUORUM_VOTERS: ${KAFKA_NODE_1_CONTROLLER_QUORUM_VOTERS}
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: ${KAFKA_NODE_1_GROUP_INITIAL_REBALANCE_DELAY_MS}
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: ${KAFKA_NODE_1_AUTO_CREATE_TOPICS_ENABLE}
      KAFKA_NUM_PARTITIONS: ${KAFKA_NODE_1_NUM_PARTITIONS}
      KAFKA_MIN_INSYNC_REPLICAS: ${KAFKA_NODE_1_MIN_INSYNC_REPLICAS}
      KAFKA_DEFAULT_REPLICATION_FACTOR: ${KAFKA_NODE_1_DEFAULT_REPLICATION_FACTOR}
      KAFKA_LOG_RETENTION_HOURS: ${KAFKA_NODE_1_LOG_RETENTION_HOURS}
      KAFKA_MESSAGE_MAX_BYTES: ${KAFKA_NODE_1_MESSAGE_MAX_BYTES}
      KAFKA_SSL_KEYSTORE_LOCATION: ${KAFKA_NODE_1_SSL_KEYSTORE_LOCATION}
      KAFKA_SSL_TRUSTSTORE_LOCATION: ${KAFKA_NODE_1_SSL_TRUSTSTORE_LOCATION}
      KAFKA_SSL_CLIENT_AUTH: ${KAFKA_NODE_1_SSL_CLIENT_AUTH}
      KAFKA_SSL_KEYSTORE_PASSWORD: ${KAFKA_SSL_KEYSTORE_PASSWORD}
      KAFKA_SSL_KEY_PASSWORD: ${KAFKA_SSL_KEY_PASSWORD}
      KAFKA_SSL_TRUSTSTORE_PASSWORD: ${KAFKA_SSL_TRUSTSTORE_PASSWORD}
      KAFKA_SSL_KEYSTORE_FILENAME: ${KAFKA_NODE_1_SSL_KEYSTORE_FILENAME}
      KAFKA_SSL_TRUSTSTORE_FILENAME: ${KAFKA_NODE_1_SSL_TRUSTSTORE_FILENAME}
      KAFKA_SSL_KEY_CREDENTIALS: ${KAFKA_SSL_KEY_CREDENTIALS}
      KAFKA_SSL_KEYSTORE_CREDENTIALS: ${KAFKA_SSL_KEYSTORE_CREDENTIALS}
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: ${KAFKA_SSL_TRUSTSTORE_CREDENTIALS}
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""
    mem_limit: ${KAFKA_MEMORY_LIMIT}
    healthcheck:
      test: /opt/kafka/bin/kafka-cluster.sh cluster-id --bootstrap-server kafka-1:9092 --config /etc/kafka/secrets/client-ssl.properties || exit 1
      interval: 10s
      timeout: 30s
      retries: 120

  kafka-2:
    depends_on:
      - kafka-1
    image: apache/kafka:${KAFKA_VERSION}
    container_name: kafka-2
    hostname: kafka-2
    user: root
    volumes:
      - type: volume
        source: kafka_2_data
        target: /var/lib/kafka
      - type: volume
        source: kafka-certs
        target: /etc/kafka/secrets
      - type: bind
        source: ./certs/kafka/client-2-ssl.properties
        target: /etc/kafka/secrets/client-ssl.properties
      - type: bind
        source: ./services/kafka/config/kafka-2.server.properties
        target: /opt/kafka/config/server.properties
      - type: bind
        source: ./services/kafka/config/log4j.properties
        target: /opt/kafka/config/log4j.properties
    networks:
      poc_network:
        aliases:
          - kafka-2
    ports:
      - "29092:9092"
      - "29093:9093"
    environment:
      KAFKA_NODE_ID: ${KAFKA_NODE_2_NODE_ID}
      KAFKA_PROCESS_ROLES: ${KAFKA_NODE_2_PROCESS_ROLES}
      KAFKA_LISTENERS: ${KAFKA_NODE_2_LISTENERS}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_NODE_2_ADVERTISED_LISTENERS}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_NODE_2_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_CONTROLLER_LISTENER_NAMES: ${KAFKA_NODE_2_CONTROLLER_LISTENER_NAMES}
      KAFKA_INTER_BROKER_LISTENER_NAME: ${KAFKA_NODE_2_INTER_BROKER_LISTENER_NAME}
      KAFKA_CONTROLLER_QUORUM_VOTERS: ${KAFKA_NODE_2_CONTROLLER_QUORUM_VOTERS}
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: ${KAFKA_NODE_2_GROUP_INITIAL_REBALANCE_DELAY_MS}
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: ${KAFKA_NODE_2_AUTO_CREATE_TOPICS_ENABLE}
      KAFKA_NUM_PARTITIONS: ${KAFKA_NODE_2_NUM_PARTITIONS}
      KAFKA_MIN_INSYNC_REPLICAS: ${KAFKA_NODE_2_MIN_INSYNC_REPLICAS}
      KAFKA_DEFAULT_REPLICATION_FACTOR: ${KAFKA_NODE_2_DEFAULT_REPLICATION_FACTOR}
      KAFKA_LOG_RETENTION_HOURS: ${KAFKA_NODE_2_LOG_RETENTION_HOURS}
      KAFKA_MESSAGE_MAX_BYTES: ${KAFKA_NODE_2_MESSAGE_MAX_BYTES}
      KAFKA_SSL_KEYSTORE_LOCATION: ${KAFKA_NODE_2_SSL_KEYSTORE_LOCATION}
      KAFKA_SSL_TRUSTSTORE_LOCATION: ${KAFKA_NODE_2_SSL_TRUSTSTORE_LOCATION}
      KAFKA_SSL_CLIENT_AUTH: ${KAFKA_NODE_2_SSL_CLIENT_AUTH}
      KAFKA_SSL_KEYSTORE_PASSWORD: ${KAFKA_SSL_KEYSTORE_PASSWORD}
      KAFKA_SSL_KEY_PASSWORD: ${KAFKA_SSL_KEY_PASSWORD}
      KAFKA_SSL_TRUSTSTORE_PASSWORD: ${KAFKA_SSL_TRUSTSTORE_PASSWORD}
      KAFKA_SSL_KEYSTORE_FILENAME: ${KAFKA_NODE_2_SSL_KEYSTORE_FILENAME}
      KAFKA_SSL_TRUSTSTORE_FILENAME: ${KAFKA_NODE_2_SSL_TRUSTSTORE_FILENAME}
      KAFKA_SSL_KEY_CREDENTIALS: ${KAFKA_SSL_KEY_CREDENTIALS}
      KAFKA_SSL_KEYSTORE_CREDENTIALS: ${KAFKA_SSL_KEYSTORE_CREDENTIALS}
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: ${KAFKA_SSL_TRUSTSTORE_CREDENTIALS}
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""
    mem_limit: ${KAFKA_MEMORY_LIMIT}
    healthcheck:
      test: /opt/kafka/bin/kafka-cluster.sh cluster-id --bootstrap-server kafka-2:9092 --config /etc/kafka/secrets/client-ssl.properties || exit 1
      interval: 10s
      timeout: 30s
      retries: 120
  
  kafka-3:
    depends_on:
      - kafka-1
    image: apache/kafka:${KAFKA_VERSION}
    container_name: kafka-3
    hostname: kafka-3
    user: root
    volumes:
      - type: volume
        source: kafka_3_data
        target: /var/lib/kafka
      - type: volume
        source: kafka-certs
        target: /etc/kafka/secrets
      - type: bind
        source: ./certs/kafka/client-3-ssl.properties
        target: /etc/kafka/secrets/client-ssl.properties
      - type: bind
        source: ./services/kafka/config/kafka-3.server.properties
        target: /opt/kafka/config/server.properties
      - type: bind
        source: ./services/kafka/config/log4j.properties
        target: /opt/kafka/config/log4j.properties
    networks:
      poc_network:
        aliases:
          - kafka-3
    ports:
      - "39092:9092"
      - "39093:9093"
    environment:
      KAFKA_NODE_ID: ${KAFKA_NODE_3_NODE_ID}
      KAFKA_PROCESS_ROLES: ${KAFKA_NODE_3_PROCESS_ROLES}
      KAFKA_LISTENERS: ${KAFKA_NODE_3_LISTENERS}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_NODE_3_ADVERTISED_LISTENERS}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_NODE_3_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_CONTROLLER_LISTENER_NAMES: ${KAFKA_NODE_3_CONTROLLER_LISTENER_NAMES}
      KAFKA_INTER_BROKER_LISTENER_NAME: ${KAFKA_NODE_3_INTER_BROKER_LISTENER_NAME}
      KAFKA_CONTROLLER_QUORUM_VOTERS: ${KAFKA_NODE_3_CONTROLLER_QUORUM_VOTERS}
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: ${KAFKA_NODE_3_GROUP_INITIAL_REBALANCE_DELAY_MS}
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: ${KAFKA_NODE_3_AUTO_CREATE_TOPICS_ENABLE}
      KAFKA_NUM_PARTITIONS: ${KAFKA_NODE_3_NUM_PARTITIONS}
      KAFKA_MIN_INSYNC_REPLICAS: ${KAFKA_NODE_3_MIN_INSYNC_REPLICAS}
      KAFKA_DEFAULT_REPLICATION_FACTOR: ${KAFKA_NODE_3_DEFAULT_REPLICATION_FACTOR}
      KAFKA_LOG_RETENTION_HOURS: ${KAFKA_NODE_3_LOG_RETENTION_HOURS}
      KAFKA_MESSAGE_MAX_BYTES: ${KAFKA_NODE_3_MESSAGE_MAX_BYTES}
      KAFKA_SSL_KEYSTORE_LOCATION: ${KAFKA_NODE_3_SSL_KEYSTORE_LOCATION}
      KAFKA_SSL_TRUSTSTORE_LOCATION: ${KAFKA_NODE_3_SSL_TRUSTSTORE_LOCATION}
      KAFKA_SSL_CLIENT_AUTH: ${KAFKA_NODE_3_SSL_CLIENT_AUTH}
      KAFKA_SSL_KEYSTORE_PASSWORD: ${KAFKA_SSL_KEYSTORE_PASSWORD}
      KAFKA_SSL_KEY_PASSWORD: ${KAFKA_SSL_KEY_PASSWORD}
      KAFKA_SSL_TRUSTSTORE_PASSWORD: ${KAFKA_SSL_TRUSTSTORE_PASSWORD}
      KAFKA_SSL_KEYSTORE_FILENAME: ${KAFKA_NODE_3_SSL_KEYSTORE_FILENAME}
      KAFKA_SSL_TRUSTSTORE_FILENAME: ${KAFKA_NODE_3_SSL_TRUSTSTORE_FILENAME}
      KAFKA_SSL_KEY_CREDENTIALS: ${KAFKA_SSL_KEY_CREDENTIALS}
      KAFKA_SSL_KEYSTORE_CREDENTIALS: ${KAFKA_SSL_KEYSTORE_CREDENTIALS}
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: ${KAFKA_SSL_TRUSTSTORE_CREDENTIALS}
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""
    mem_limit: ${KAFKA_MEMORY_LIMIT}
    healthcheck:
      test: /opt/kafka/bin/kafka-cluster.sh cluster-id --bootstrap-server kafka-3:9092 --config /etc/kafka/secrets/client-ssl.properties || exit 1
      interval: 10s
      timeout: 30s
      retries: 120

  kibana-setup:
    depends_on:
      kibana:
        condition: service_healthy
    image: curlimages/curl:${CURL_VERSION}
    container_name: kibana-setup
    hostname: kibana-setup
    user: root
    volumes:
      - type: volume
        source: elastic-certs
        target: /certs
      - type: bind
        source: ./services/kibana/setup
        target: /kibana_setup
    networks:
      poc_network:
        aliases:
          - kibana-setup
    environment:
      - ELASTICSEARCH_URL=https://elasticsearch:9200
      - KIBANA_URL=http://kibana:5601
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_SUPERUSER=${KIBANA_SUPERUSER}
      - KIBANA_SUPERUSER_PASSWORD=${KIBANA_SUPERUSER_PASSWORD}
      - SSL_ENABLED=true
    entrypoint: ["/bin/sh", "-c"]
    command: >
      "
      apk add --no-cache bash &&
      chmod +x /kibana_setup/import_saved_objects.sh &&
      /kibana_setup/import_saved_objects.sh
      "

  logstash:
    depends_on:
      elasticsearch:
        condition: service_healthy
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
      kafka-3:
        condition: service_healthy
    image: docker.elastic.co/logstash/logstash:${ELASTIC_VERSION}
    labels:
      co.elastic.logs/module: logstash
    container_name: logstash
    hostname: logstash
    user: root 
    volumes:
      - type: volume
        source: elastic-certs
        target: /usr/share/logstash/certs
      - type: volume
        source: kafka-certs
        target: /usr/share/logstash/certs/kafka
      - type: volume
        source: freeradius_logs
        target: ${FREERADIUS_LOG_DIR}
        read_only: true
      - type: bind
        source: ./services/logstash/pipelines
        target: /usr/share/logstash/pipeline
        read_only: true
      - type: bind
        source: ./services/logstash/config
        target: /usr/share/logstash/config
      # - logstash_config:/usr/share/logstash/config
    networks:
      poc_network:
        aliases:
          - logstash
    ports:
      - "${LOGSTASH_PORT}:5044"
    environment:
      - xpack.monitoring.enabled=${LOGSTASH_XPACK_MONITORING_ENABLED}
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://elasticsearch:9200
    mem_limit: ${LOGSTASH_MEMORY_LIMIT}
    healthcheck:
      test: curl -fs http://localhost:9600 || exit 1
      interval: 10s
      timeout: 10s
      retries: 120

  # metricbeat:
  #   depends_on:
  #     elasticsearch:
  #       condition: service_healthy
  #   image: docker.elastic.co/beats/metricbeat:${ELASTIC_VERSION}
  #   container_name: metricbeat
  #   hostname: metricbeat
  #   user: root
  #   volumes:
  #     - type: volume
  #       source: elastic-certs
  #       target: /usr/share/metricbeat/certs
  #     - type: volume
  #       source: metricbeat_data
  #       target: /usr/share/metricbeat/data
  #     - type: bind
  #       source: ./services/metricbeat/config/metricbeat.yml
  #       target: /usr/share/metricbeat/metricbeat.yml
  #       read_only: true
  #     - type: bind
  #       source: /var/run/docker.sock
  #       target: /var/run/docker.sock
  #       read_only: true
  #     - type: bind
  #       source: /sys/fs/cgroup
  #       target: /hostfs/sys/fs/cgroup
  #       read_only: true
  #     - type: bind
  #       source: /proc
  #       target: /hostfs/proc
  #       read_only: true
  #     - type: bind
  #       source: /
  #       target: /hostfs
  #       read_only: true
  #   networks:
  #     poc_network:
  #       aliases:
  #         - metricbeat
  #   environment:
  #     - ELASTIC_USER=elastic
  #     - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
  #     - ELASTIC_HOSTS=https://elasticsearch:9200
  #     - KIBANA_HOSTS=http://kibana:5601
  #     - LOGSTASH_HOSTS=http://logstash:9600

  filebeat:
    depends_on:
      elasticsearch:
        condition: service_healthy
    image: docker.elastic.co/beats/filebeat:${ELASTIC_VERSION}
    container_name: filebeat
    hostname: filebeat
    user: root
    volumes:
      - type: volume
        source: elastic-certs
        target: /usr/share/filebeat/certs
      - type: volume
        source: filebeat_data
        target: /usr/share/filebeat/data
      - type: bind
        source: ./services/filebeat/config/filebeat.yml
        target: /usr/share/filebeat/filebeat.yml
        read_only: true
      - type: bind
        source: /var/lib/docker/containers
        target: /var/lib/docker/containers
        read_only: true
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
    networks:
      poc_network:
        aliases:
          - filebeat
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://elasticsearch:9200
      - KIBANA_HOSTS=http://kibana:5601
      - LOGSTASH_HOSTS=http://logstash:9600

  freeradius:
    depends_on:
      logstash:
        condition:
          service_healthy
    image: freeradius/freeradius-server:${FREERADIUS_VERSION}
    container_name: freeradius
    hostname: freeradius
    user: root
    volumes:
      - type: volume
        source: freeradius_logs
        target: ${FREERADIUS_LOG_DIR}
      - type: bind
        source: ./services/freeradius/config/radiusd.conf
        target: /etc/freeradius/radiusd.conf
      - type: bind
        source: ./services/freeradius/config/users
        target: /etc/freeradius/users
      - type: bind
        source: ./services/freeradius/config/mods-available/detail
        target: /etc/freeradius/mods-available/detail
      - type: bind
        source: ./services/freeradius/test
        target: /etc/freeradius/test
    networks:
      poc_network:
        aliases:
          - freeradius
    ports:
      - "${FREERADIUS_AUTH_PORT}:1812/udp"
      - "${FREERADIUS_ACCT_PORT}:1813/udp"
    mem_limit: ${FREERADIUS_MEMORY_LIMIT}
    entrypoint: ["freeradius", "-f"]
