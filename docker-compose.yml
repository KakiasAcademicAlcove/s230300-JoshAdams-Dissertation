version: "3.8"

volumes:
  freeradius_logs:
    name: freeradius_logs
    driver: local
  kafka-data-1:
    name: kafka-data-1
    driver: local
  kafka-data-2:
    name: kafka-data-2
    driver: local
  kafka-data-3:
    name: kafka-data-3
    driver: local
  elasticsearch_data:
    name: elasticsearch_data
    driver: local
  kibana_data:
    name: kibana_data
    driver: local
  logstash_data:
    name: logstash_data
    driver: local
  filebeat_data:
    name: logstash_data
    driver: local
  metricbeat_data:
    name: logstash_data
    driver: local

networks:
  kafka_network:
    name: kafka_network
    driver: bridge
  elastic_network:
    name: elastic_network
    driver: bridge

services:
  kafka-1:
    image: apache/kafka:${KAFKA_VERSION}
    container_name: kafka-1
    environment:
      KAFKA_NODE_ID: ${KAFKA_NODE_1_NODE_ID}
      KAFKA_PROCESS_ROLES: ${KAFKA_NODE_1_PROCESS_ROLES}
      KAFKA_LISTENERS: ${KAFKA_NODE_1_LISTENERS}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_NODE_1_ADVERTISED_LISTENERS}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_NODE_1_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_CONTROLLER_LISTENER_NAMES: ${KAFKA_NODE_1_CONTROLLER_LISTENER_NAMES}
      KAFKA_INTER_BROKER_LISTENER_NAME: ${KAFKA_NODE_1_INTER_BROKER_LISTENER_NAME}
      KAFKA_CONTROLLER_QUORUM_VOTERS: ${KAFKA_NODE_1_CONTROLLER_QUORUM_VOTERS}
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: ${KAFKA_NODE_1_GROUP_INITIAL_REBALANCE_DELAY_MS}
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: ${KAFKA_NODE_1_AUTO_CREATE_TOPICS_ENABLE}
      KAFKA_NUM_PARTITIONS: ${KAFKA_NODE_1_NUM_PARTITIONS}
      KAFKA_MIN_INSYNC_REPLICAS: ${KAFKA_NODE_1_MIN_INSYNC_REPLICAS}
      KAFKA_DEFAULT_REPLICATION_FACTOR: ${KAFKA_NODE_1_DEFAULT_REPLICATION_FACTOR}
      KAFKA_LOG_RETENTION_HOURS: ${KAFKA_NODE_1_LOG_RETENTION_HOURS}
      KAFKA_MESSAGE_MAX_BYTES: ${KAFKA_NODE_1_MESSAGE_MAX_BYTES}
    ports:
      - "${KAFKA_NODE_1_PORT}:9092"
    volumes:
      - kafka-data-1:/var/lib/kafka
      - ${KAFKA_NODE_1_CONFIG_DIR}/server.properties:/opt/kafka/config/server.properties
    networks:
      - kafka_network
      - elastic_network
    healthcheck:
      test: /opt/kafka/bin/kafka-cluster.sh cluster-id --bootstrap-server kafka-1:9092 || exit 1
      interval: 10s
      timeout: 10s
      retries: 120

  kafka-2:
    image: apache/kafka:${KAFKA_VERSION}
    container_name: kafka-2
    environment:
      KAFKA_NODE_ID: ${KAFKA_NODE_2_NODE_ID}
      KAFKA_PROCESS_ROLES: ${KAFKA_NODE_2_PROCESS_ROLES}
      KAFKA_LISTENERS: ${KAFKA_NODE_2_LISTENERS}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_NODE_2_ADVERTISED_LISTENERS}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_NODE_2_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_CONTROLLER_LISTENER_NAMES: ${KAFKA_NODE_2_CONTROLLER_LISTENER_NAMES}
      KAFKA_INTER_BROKER_LISTENER_NAME: ${KAFKA_NODE_2_INTER_BROKER_LISTENER_NAME}
      KAFKA_CONTROLLER_QUORUM_VOTERS: ${KAFKA_NODE_2_CONTROLLER_QUORUM_VOTERS}
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: ${KAFKA_NODE_2_GROUP_INITIAL_REBALANCE_DELAY_MS}
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: ${KAFKA_NODE_2_AUTO_CREATE_TOPICS_ENABLE}
      KAFKA_NUM_PARTITIONS: ${KAFKA_NODE_2_NUM_PARTITIONS}
      KAFKA_MIN_INSYNC_REPLICAS: ${KAFKA_NODE_2_MIN_INSYNC_REPLICAS}
      KAFKA_DEFAULT_REPLICATION_FACTOR: ${KAFKA_NODE_2_DEFAULT_REPLICATION_FACTOR}
      KAFKA_LOG_RETENTION_HOURS: ${KAFKA_NODE_2_LOG_RETENTION_HOURS}
      KAFKA_MESSAGE_MAX_BYTES: ${KAFKA_NODE_2_MESSAGE_MAX_BYTES}
    ports:
      - "${KAFKA_NODE_2_PORT}:9092"
    volumes:
      - kafka-data-2:/var/lib/kafka
      - ${KAFKA_NODE_2_CONFIG_DIR}/server.properties:/opt/kafka/config/server.properties
    networks:
      - kafka_network
      - elastic_network
    healthcheck:
      test: /opt/kafka/bin/kafka-cluster.sh cluster-id --bootstrap-server kafka-2:9092 || exit 1
      interval: 10s
      timeout: 10s
      retries: 120
  
  kafka-3:
    image: apache/kafka:${KAFKA_VERSION}
    container_name: kafka-3
    environment:
      KAFKA_NODE_ID: ${KAFKA_NODE_3_NODE_ID}
      KAFKA_PROCESS_ROLES: ${KAFKA_NODE_3_PROCESS_ROLES}
      KAFKA_LISTENERS: ${KAFKA_NODE_3_LISTENERS}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_NODE_3_ADVERTISED_LISTENERS}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_NODE_3_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_CONTROLLER_LISTENER_NAMES: ${KAFKA_NODE_3_CONTROLLER_LISTENER_NAMES}
      KAFKA_INTER_BROKER_LISTENER_NAME: ${KAFKA_NODE_3_INTER_BROKER_LISTENER_NAME}
      KAFKA_CONTROLLER_QUORUM_VOTERS: ${KAFKA_NODE_3_CONTROLLER_QUORUM_VOTERS}
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: ${KAFKA_NODE_3_GROUP_INITIAL_REBALANCE_DELAY_MS}
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: ${KAFKA_NODE_3_AUTO_CREATE_TOPICS_ENABLE}
      KAFKA_NUM_PARTITIONS: ${KAFKA_NODE_3_NUM_PARTITIONS}
      KAFKA_MIN_INSYNC_REPLICAS: ${KAFKA_NODE_3_MIN_INSYNC_REPLICAS}
      KAFKA_DEFAULT_REPLICATION_FACTOR: ${KAFKA_NODE_3_DEFAULT_REPLICATION_FACTOR}
      KAFKA_LOG_RETENTION_HOURS: ${KAFKA_NODE_3_LOG_RETENTION_HOURS}
      KAFKA_MESSAGE_MAX_BYTES: ${KAFKA_NODE_3_MESSAGE_MAX_BYTES}
    ports:
      - "${KAFKA_NODE_3_PORT}:9092"
    volumes:
      - kafka-data-3:/var/lib/kafka
      - ${KAFKA_NODE_3_CONFIG_DIR}/server.properties:/opt/kafka/config/server.properties
    networks:
      - kafka_network
      - elastic_network
    healthcheck:
      test: /opt/kafka/bin/kafka-cluster.sh cluster-id --bootstrap-server kafka-3:9092 || exit 1
      interval: 10s
      timeout: 10s
      retries: 120

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}
    container_name: elasticsearch
    labels:
      co.elastic.logs/module: elasticsearch
    environment:
      - xpack.security.enabled=${ELASTICSEARCH_XPACK_SECURITY_ENABLED}
      - discovery.type=${ELASTICSEARCH_DISCOVERY_TYPE}
    ports:
      - "${ELASTICSEARCH_PORT}:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      # - ${ELASTICSEARCH_CONFIG_DIR}/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    networks:
      - elastic_network
    healthcheck:
      test: curl -fs http://localhost:9200/_cluster/health || exit 1
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    image: docker.elastic.co/kibana/kibana:${ELASTIC_VERSION}
    container_name: kibana
    labels:
      co.elastic.logs/module: kibana
    environment:
      - ELASTICSEARCH_HOSTS=${ELASTICSEARCH_HOST}
    volumes:
      - ${KIBANA_CONFIG_DIR}/kibana.yml:/usr/share/kibana/config/kibana.yml
    ports:
      - "${KIBANA_PORT}:5601"
    networks:
      - elastic_network
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: 
        [
         "CMD-SHELL",
         "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana-setup:
    image: curlimages/curl:${CURL_VERSION}
    container_name: kibana-setup
    user: root
    volumes:
      - ${KIBANA_SETUP_DIR}:/kibana_setup
    entrypoint: ["/bin/sh", "-c"]
    command: >
      "
      apk add --no-cache bash &&
      chmod +x /kibana_setup/import_saved_objects.sh &&
      /kibana_setup/import_saved_objects.sh
      "
    depends_on:
      kibana:
        condition: service_healthy
    networks:
      - elastic_network
    # profiles:
    #   - setup

  logstash:
    build: ./logstash
    container_name: logstash
    labels:
      co.elastic.logs/module: logstash
    volumes:
      - logstash_data:/usr/share/logstash/data
      - "${LOGSTASH_INGEST_DATA_DIR}:/usr/share/logstash/ingest_data/"
      - freeradius_logs:${FREERADIUS_LOG_DIR}:ro
      # - logstash_config:/usr/share/logstash/config
    ports:
      - "${LOGSTASH_PORT}:5044"
    networks:
      - kafka_network
      - elastic_network
    depends_on:
      elasticsearch:
        condition: service_healthy
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
      kafka-3:
        condition: service_healthy
    healthcheck:
      test: curl -fs http://localhost:9600 || exit 1
      interval: 10s
      timeout: 10s
      retries: 120

  metricbeat:
    container_name: metricbeat
    depends_on:
      elasticsearch:
        condition: service_healthy
    image: docker.elastic.co/beats/metricbeat:${ELASTIC_VERSION}
    user: root
    volumes:
      - metricbeat_data:/usr/share/metricbeat/data
      - "${METRICBEAT_CONFIG_DIR}/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "/sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro"
      - "/proc:/hostfs/proc:ro"
      - "/:/hostfs:ro"
    environment:
      #  - ELASTIC_USER=elastic
      #  - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=${ELASTICSEARCH_HOST}
      - KIBANA_HOSTS=${KIBANA_HOST}
      - LOGSTASH_HOSTS=${LOGSTASH_HOST}
    networks:
      - elastic_network

  filebeat:
    container_name: filebeat
    depends_on:
      elasticsearch:
        condition: service_healthy
    image: docker.elastic.co/beats/filebeat:${ELASTIC_VERSION}
    user: root
    volumes:
      - filebeat_data:/usr/share/filebeat/data
      - "${FILEBEAT_INGEST_DATA_DIR}:/usr/share/filebeat/ingest_data/"
      - "${FILEBEAT_CONFIG_DIR}/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro"
      - "/var/lib/docker/containers:/var/lib/docker/containers:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    environment:
      # - ELASTIC_USER=elastic
      # - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=${ELASTICSEARCH_HOST}
      - KIBANA_HOSTS=${KIBANA_HOST}
      - LOGSTASH_HOSTS=${LOGSTASH_HOST}
    networks:
      - elastic_network

  freeradius:
    build: ./freeradius
    container_name: freeradius
    volumes:
      - freeradius_logs:${FREERADIUS_LOG_DIR}
      - type: bind
        source: ${FREERADIUS_CONFIG_DIR}/radiusd.conf
        target: /etc/freeradius/radiusd.conf
      - type: bind
        source: ${FREERADIUS_CONFIG_DIR}/users
        target: /etc/freeradius/users
      - type: bind
        source: ${FREERADIUS_CONFIG_DIR}/mods-available/detail
        target: /etc/freeradius/mods-available/detail
    entrypoint: ["freeradius", "-f"]
    ports:
      - "1812:1812/udp"
      - "1813:1813/udp"
    networks:
      - kafka_network
    depends_on:
      logstash:
        condition:
          service_healthy
