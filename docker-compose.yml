version: "2.4"

volumes:
  elastic-certs:
    name: elastic-certs
    driver: local
  kafka-1-certs:
    name: kafka-1-certs
    driver: local
  kafka-2-certs:
    name: kafka-2-certs
    driver: local
  kafka-3-certs:
    name: kafka-3-certs
    driver: local
  kafka-logstash-certs:
    name: kafka-3-certs
    driver: local
  freeradius_logs:
    name: freeradius_logs
    driver: local
  freeradius_data:
    name: freeradius_data
    driver: local
  kafka_1_data:
    name: kafka_1_data
    driver: local
  kafka_2_data:
    name: kafka_2_data
    driver: local
  kafka_3_data:
    name: kafka_3_data
    driver: local
  elasticsearch_data:
    name: elasticsearch_data
    driver: local
  kibana_data:
    name: kibana_data
    driver: local
  logstash_data:
    name: logstash_data
    driver: local
  metricbeat_data:
    name: metricbeat_data
    driver: local
  filebeat_data:
    name: filebeat_data
    driver: local

networks:
  poc_network:
    name: poc_network
    driver: bridge

services:
  kafka-security:
    image: lucidworks/keytool-utils:${KEYTOOL_UTILS_VERSION}
    container_name: kafka-security
    hostname: kafka-security
    user: root
    restart: "no" 
    volumes:
      - type: volume
        source: kafka-1-certs
        target: /certs/kafka-1
      - type: volume
        source: kafka-2-certs
        target: /certs/kafka-2
      - type: volume
        source: kafka-3-certs
        target: /certs/kafka-3
      - type: volume
        source: kafka-logstash-certs
        target: /certs/logstash
      - type: bind
        source: ./certs/kafka
        target: /kafka_certs_setup
    networks:
      poc_network:
        aliases:
          - kafka-security
    environment:
      - KAFKA_CERT_PASSWORD=${KAFKA_CERT_PASSWORD}
    entrypoint: ["/bin/bash", "-c"]
    command: >
      "
      chmod +x /kafka_certs_setup/certs_creation.sh &&
      /kafka_certs_setup/certs_creation.sh
      " 

  elastic-security:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}
    container_name: elastic-security
    hostname: elastic-security
    user: root
    volumes:
      - type: volume
        source: elastic-certs
        target: /usr/share/elasticsearch/config/certs
      - type: bind
        source: ./certs/elastic/certs_creation.sh
        target: /elastic_certs_setup/certs_creation.sh
      - type: bind
        source: ./certs/elastic/instances.yml
        target: /elastic_certs_setup/instances.yml
        read_only: true
    networks:
      poc_network:
        aliases:
          - elastic-security
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_PASSWORD=${KIBANA_PASSWORD}
    entrypoint: ["/bin/bash", "-c"]
    command: >
      "
      chmod +x /elastic_certs_setup/certs_creation.sh &&
      /elastic_certs_setup/certs_creation.sh
      "
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/elasticsearch/elasticsearch.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  elasticsearch:
    depends_on:
      elastic-security:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}
    labels:
      co.elastic.logs/module: elasticsearch
    container_name: elasticsearch
    hostname: elasticsearch
    volumes:
      - type: volume 
        source: elastic-certs
        target: /usr/share/elasticsearch/config/certs
      - type: volume
        source: elasticsearch_data
        target: /usr/share/elasticsearch/data
    networks:
      poc_network:
        aliases:
          - elasticsearch
    ports:
      - ${ELASTICSEARCH_PORT}:9200
    environment:
      - node.name=elasticsearch
      - cluster.name=elasticsearch-cluster
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/elasticsearch/elasticsearch.key
      - xpack.security.http.ssl.certificate=certs/elasticsearch/elasticsearch.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/elasticsearch/elasticsearch.key
      - xpack.security.transport.ssl.certificate=certs/elasticsearch/elasticsearch.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=basic
    mem_limit: ${ELASTICSEARCH_MEMORY_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    depends_on:
      elasticsearch:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${ELASTIC_VERSION}
    labels:
      co.elastic.logs/module: kibana
    container_name: kibana
    hostname: kibana
    volumes:
      - type: volume
        source: elastic-certs
        target: /usr/share/kibana/config/certs
      - type: volume
        source: kibana_data
        target: /usr/share/kibana/data
    networks:
      poc_network:
        aliases:
          - kibana
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - XPACK_SECURITY_ENCRYPTIONKEY=${ELASTIC_ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ELASTIC_ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ELASTIC_ENCRYPTION_KEY}
    mem_limit: ${KIBANA_MEMORY_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kafka-1:
    depends_on:
      kafka-security:
        condition: service_completed_successfully
    image: apache/kafka:${KAFKA_VERSION}
    container_name: kafka-1
    hostname: kafka-1
    volumes:
      - type: volume
        source: kafka_1_data
        target: /var/lib/kafka
      - type: volume
        source: kafka-1-certs
        target: /etc/kafka/secrets
    networks:
      poc_network:
        aliases:
          - kafka-1
    ports:
      - "19092:9092"
      - "19093:9093"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: controller,broker
      KAFKA_LISTENERS: CONTROLLER://:9093,BROKER://:9092
      KAFKA_ADVERTISED_LISTENERS: BROKER://kafka-1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:SSL,BROKER:SSL
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: BROKER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_LOG_RETENTION_HOURS: 72
      KAFKA_MESSAGE_MAX_BYTES: 1000012
      KAFKA_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka-1.keystore.jks
      KAFKA_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/kafka-1.truststore.jks
      KAFKA_SSL_CLIENT_AUTH: requested
      KAFKA_SSL_KEYSTORE_PASSWORD: ${KAFKA_SSL_KEYSTORE_PASSWORD}
      KAFKA_SSL_KEY_PASSWORD: ${KAFKA_SSL_KEY_PASSWORD}
      KAFKA_SSL_TRUSTSTORE_PASSWORD: ${KAFKA_SSL_TRUSTSTORE_PASSWORD}
      KAFKA_SSL_KEYSTORE_FILENAME: kafka-1.keystore.jks
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka-1.truststore.jks
      KAFKA_SSL_KEY_CREDENTIALS: key_credentials.txt
      KAFKA_SSL_KEYSTORE_CREDENTIALS: keystore_credentials.txt
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: truststore_credentials.txt
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""
    mem_limit: ${KAFKA_MEMORY_LIMIT}
    healthcheck:
      test: /opt/kafka/bin/kafka-cluster.sh cluster-id --bootstrap-server kafka-1:9092 --config /etc/kafka/secrets/kafka-1-ssl.properties || exit 1
      interval: 10s
      timeout: 30s
      retries: 120

  kafka-2:
    depends_on:
      - kafka-1
    image: apache/kafka:${KAFKA_VERSION}
    container_name: kafka-2
    hostname: kafka-2
    volumes:
      - type: volume
        source: kafka_2_data
        target: /var/lib/kafka
      - type: volume
        source: kafka-2-certs
        target: /etc/kafka/secrets
    networks:
      poc_network:
        aliases:
          - kafka-2
    ports:
      - "29092:9092"
      - "29093:9093"
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: controller,broker
      KAFKA_LISTENERS: CONTROLLER://:9093,BROKER://:9092
      KAFKA_ADVERTISED_LISTENERS: BROKER://kafka-2:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:SSL,BROKER:SSL
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: BROKER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_LOG_RETENTION_HOURS: 72
      KAFKA_MESSAGE_MAX_BYTES: 1000012
      KAFKA_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka-2.keystore.jks
      KAFKA_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/kafka-2.truststore.jks
      KAFKA_SSL_CLIENT_AUTH: requested
      KAFKA_SSL_KEYSTORE_PASSWORD: ${KAFKA_SSL_KEYSTORE_PASSWORD}
      KAFKA_SSL_KEY_PASSWORD: ${KAFKA_SSL_KEY_PASSWORD}
      KAFKA_SSL_TRUSTSTORE_PASSWORD: ${KAFKA_SSL_TRUSTSTORE_PASSWORD}
      KAFKA_SSL_KEYSTORE_FILENAME: kafka-2.keystore.jks
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka-2.truststore.jks
      KAFKA_SSL_KEY_CREDENTIALS: key_credentials.txt
      KAFKA_SSL_KEYSTORE_CREDENTIALS: keystore_credentials.txt
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: truststore_credentials.txt
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""
    mem_limit: ${KAFKA_MEMORY_LIMIT}
    healthcheck:
      test: /opt/kafka/bin/kafka-cluster.sh cluster-id --bootstrap-server kafka-2:9092 --config /etc/kafka/secrets/kafka-2-ssl.properties || exit 1
      interval: 10s
      timeout: 30s
      retries: 120
  
  kafka-3:
    depends_on:
      - kafka-1
    image: apache/kafka:${KAFKA_VERSION}
    container_name: kafka-3
    hostname: kafka-3
    volumes:
      - type: volume
        source: kafka_3_data
        target: /var/lib/kafka
      - type: volume
        source: kafka-3-certs
        target: /etc/kafka/secrets
    networks:
      poc_network:
        aliases:
          - kafka-3
    ports:
      - "39092:9092"
      - "39093:9093"
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_PROCESS_ROLES: controller,broker
      KAFKA_LISTENERS: CONTROLLER://:9093,BROKER://:9092
      KAFKA_ADVERTISED_LISTENERS: BROKER://kafka-3:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:SSL,BROKER:SSL
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: BROKER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_LOG_RETENTION_HOURS: 72
      KAFKA_MESSAGE_MAX_BYTES: 1000012
      KAFKA_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka-3.keystore.jks
      KAFKA_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/kafka-3.truststore.jks
      KAFKA_SSL_CLIENT_AUTH: requested
      KAFKA_SSL_KEYSTORE_PASSWORD: ${KAFKA_SSL_KEYSTORE_PASSWORD}
      KAFKA_SSL_KEY_PASSWORD: ${KAFKA_SSL_KEY_PASSWORD}
      KAFKA_SSL_TRUSTSTORE_PASSWORD: ${KAFKA_SSL_TRUSTSTORE_PASSWORD}
      KAFKA_SSL_KEYSTORE_FILENAME: kafka-3.keystore.jks
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka-3.truststore.jks
      KAFKA_SSL_KEY_CREDENTIALS: key_credentials.txt
      KAFKA_SSL_KEYSTORE_CREDENTIALS: keystore_credentials.txt
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: truststore_credentials.txt
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""
    mem_limit: ${KAFKA_MEMORY_LIMIT}
    healthcheck:
      test: /opt/kafka/bin/kafka-cluster.sh cluster-id --bootstrap-server kafka-3:9092 --config /etc/kafka/secrets/kafka-3-ssl.properties || exit 1
      interval: 10s
      timeout: 30s
      retries: 120

  kibana-setup:
    depends_on:
      kibana:
        condition: service_healthy
    image: curlimages/curl:${CURL_VERSION}
    container_name: kibana-setup
    hostname: kibana-setup
    user: root
    volumes:
      - type: volume
        source: elastic-certs
        target: /certs
      - type: bind
        source: ./services/kibana/setup
        target: /kibana_setup
    networks:
      poc_network:
        aliases:
          - kibana-setup
    environment:
      - ELASTICSEARCH_URL=https://elasticsearch:9200
      - KIBANA_URL=http://kibana:5601
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_SUPERUSER=super_kibana
      - KIBANA_SUPERUSER_PASSWORD=${KIBANA_SUPERUSER_PASSWORD}
    entrypoint: ["/bin/sh", "-c"]
    command: >
      "
      apk update && apk add bash &&
      chmod +x /kibana_setup/import_saved_objects.sh &&
      /kibana_setup/import_saved_objects.sh
      "

  logstash:
    depends_on:
      elasticsearch:
        condition: service_healthy
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
      kafka-3:
        condition: service_healthy
    image: docker.elastic.co/logstash/logstash:${ELASTIC_VERSION}
    labels:
      co.elastic.logs/module: logstash
    container_name: logstash
    hostname: logstash
    user: root 
    volumes:
      - type: volume
        source: elastic-certs
        target: /usr/share/logstash/certs
      - type: volume
        source: kafka-logstash-certs
        target: /usr/share/logstash/certs/kafka
      - type: volume
        source: freeradius_logs
        target: /var/log/freeradius
        read_only: true
      - type: bind
        source: ./services/logstash/pipelines
        target: /usr/share/logstash/pipeline
        read_only: true
      - type: bind
        source: ./services/logstash/config
        target: /usr/share/logstash/config
    networks:
      poc_network:
        aliases:
          - logstash
    ports:
      - "${LOGSTASH_PORT}:5044"
    environment:
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://elasticsearch:9200
      - KAFKA_TRUSTSTORE_PASSWORD=${KAFKA_SSL_TRUSTSTORE_PASSWORD}
    mem_limit: ${LOGSTASH_MEMORY_LIMIT}
    healthcheck:
      test: curl -fs http://localhost:9600 || exit 1
      interval: 10s
      timeout: 10s
      retries: 120

  metricbeat:
    depends_on:
      elasticsearch:
        condition: service_healthy
    image: docker.elastic.co/beats/metricbeat:${ELASTIC_VERSION}
    container_name: metricbeat
    hostname: metricbeat
    user: root
    volumes:
      - type: volume
        source: elastic-certs
        target: /usr/share/metricbeat/certs
      - type: volume
        source: metricbeat_data
        target: /usr/share/metricbeat/data
      - type: bind
        source: ./services/metricbeat/config/metricbeat.yml
        target: /usr/share/metricbeat/metricbeat.yml
        read_only: true
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
    networks:
      poc_network:
        aliases:
          - metricbeat
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://elasticsearch:9200
      - KIBANA_HOSTS=http://kibana:5601
      - LOGSTASH_HOSTS=http://logstash:9600
    mem_limit: ${METRICBEAT_MEMORY_LIMIT}

  filebeat:
    depends_on:
      elasticsearch:
        condition: service_healthy
    image: docker.elastic.co/beats/filebeat:${ELASTIC_VERSION}
    container_name: filebeat
    hostname: filebeat
    user: root
    volumes:
      - type: volume
        source: elastic-certs
        target: /usr/share/filebeat/certs
      - type: volume
        source: filebeat_data
        target: /usr/share/filebeat/data
      - type: bind
        source: ./services/filebeat/config/filebeat.yml
        target: /usr/share/filebeat/filebeat.yml
        read_only: true
      - type: bind
        source: /var/lib/docker/containers
        target: /var/lib/docker/containers
        read_only: true
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
    networks:
      poc_network:
        aliases:
          - filebeat
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://elasticsearch:9200
      - KIBANA_HOSTS=http://kibana:5601
      - LOGSTASH_HOSTS=http://logstash:9600
    mem_limit: ${FILEBEAT_MEMORY_LIMIT}

  freeradius:
    depends_on:
      kibana-setup:
        condition: service_completed_successfully
    image: freeradius/freeradius-server:${FREERADIUS_VERSION}
    container_name: freeradius
    hostname: freeradius
    user: root
    volumes:
      - type: volume
        source: freeradius_logs
        target: /var/log/freeradius
      - type: bind
        source: ./services/freeradius/config/radiusd.conf
        target: /etc/freeradius/radiusd.conf
      - type: bind
        source: ./services/freeradius/config/users
        target: /etc/freeradius/users
      - type: bind
        source: ./services/freeradius/config/mods-available/detail
        target: /etc/freeradius/mods-available/detail
      - type: bind
        source: ./services/freeradius/test
        target: /etc/freeradius/test
    networks:
      poc_network:
        aliases:
          - freeradius
    ports:
      - "${FREERADIUS_AUTH_PORT}:1812/udp"
      - "${FREERADIUS_ACCT_PORT}:1813/udp"
    mem_limit: ${FREERADIUS_MEMORY_LIMIT}
    entrypoint: ["freeradius", "-f"]
